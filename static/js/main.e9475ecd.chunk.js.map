{"version":3,"sources":["gameOfLife.js","gameOfLifeUtil.js","App.js","serviceWorker.js","index.js"],"names":["require","zipper","validateNeighbours","contains","findNeighboursOfCell","cell","bounds","xCoordinates","yCoordinates","zip","allNeighbours","reduce","splice","validateNeighbour","bind","filter","findAllNeighbours","limits","concat","row","column","aliveNeighboursCalculator","currentGeneration","result","isAlive","length","calculateAliveNeighboursOfCell","calculateAliveNeighbours","cells","Object","keys","aliveNeighboursOfEachCell","module","exports","nextGeneration","neighboursState","allCells","rulesApplier","JSON","parse","nextGen","map","element","index","push","neighbour","startPoint","topLeft","endPopint","bottomRight","isValid","some","Game","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","GameOfLife","boundaryLimits","size","state","aliveCells","startGame","assertThisInitialized","stopGame","getNextGenerationCells","id","split","number","document","getElementById","style","background","forEach","join","removeCurrentGenerationCells","displayNextGenerationCells","setState","_this2","timerId","setInterval","clearInterval","react_default","a","createElement","className","App_GameHeader","App_CreateTable","key","game","App_CreateGameButtons","name","Component","GameHeader","GenerateColumns","columns","onClick","addAliveCells","GenerateRows","rows","App_GenerateColumns","CreateTableBody","App_GenerateRows","CreateTable","App_CreateTableBody","CreateButton","action","CreateGameButtons","App_CreateButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9475ecd.chunk.js","sourcesContent":["const { zipper, validateNeighbours, contains } = require(\"./gameOfLifeUtil.js\");\n\nconst findNeighboursOfCell = function(cell, bounds) {\n  let xCoordinates = [cell[0] - 1, cell[0], cell[0] + 1];\n  let yCoordinates = [cell[1] - 1, cell[1], cell[1] + 1];\n  let zip = zipper(yCoordinates);\n  let allNeighbours = xCoordinates.reduce(zip, []);\n  allNeighbours.splice(4, 1);\n  let validateNeighbour = validateNeighbours.bind(null, bounds);\n  let allValidNeighbours = allNeighbours.filter(validateNeighbour);\n  return allValidNeighbours;\n};\n\nconst findAllNeighbours = function(bounds) {\n  let limits = bounds[\"bottomRight\"].concat(bounds[\"topLeft\"]);\n  let allNeighbours = {};\n  for (let row = limits[2]; row <= limits[0]; row++) {\n    for (let column = limits[3]; column <= limits[1]; column++) {\n      allNeighbours[\"[\" + row + \", \" + column + \"]\"] = findNeighboursOfCell(\n        [row, column],\n        bounds\n      );\n    }\n  }\n  return allNeighbours;\n};\n\nconst calculateAliveNeighboursOfCell = function(\n  allNeighbours,\n  currentGeneration,\n  cell\n) {\n  let isAlive = contains.bind(null, currentGeneration);\n  return allNeighbours[cell].filter(isAlive).length;\n};\n\nconst aliveNeighboursCalculator = function(allNeighbours, currentGeneration) {\n  return function(result, cell) {\n    result[cell] = calculateAliveNeighboursOfCell(\n      allNeighbours,\n      currentGeneration,\n      cell\n    );\n    return result;\n  };\n};\n\nconst calculateAliveNeighbours = function(allNeighbours, currentGeneration) {\n  let cells = Object.keys(allNeighbours);\n  let aliveNeighboursOfEachCell = aliveNeighboursCalculator(\n    allNeighbours,\n    currentGeneration\n  );\n  let neighboursState = cells.reduce(aliveNeighboursOfEachCell, {});\n  return neighboursState;\n};\n\nconst applyRules = function(neighboursState, currentGeneration, cell) {\n  let isAlive = neighboursState[cell] === 3;\n  isAlive =\n    isAlive ||\n    (neighboursState[cell] === 2 &&\n      contains(currentGeneration, JSON.parse(cell)));\n  return isAlive;\n};\n\nconst nextGeneration = function(currentGeneration, bounds) {\n  let allNeighbours = findAllNeighbours(bounds);\n  let neighboursState = calculateAliveNeighbours(\n    allNeighbours,\n    currentGeneration\n  );\n  let allCells = Object.keys(neighboursState);\n  let rulesApplier = applyRules.bind(null, neighboursState, currentGeneration);\n  let nextGen = allCells.filter(rulesApplier);\n  nextGen = nextGen.map(cell => JSON.parse(cell));\n  return nextGen;\n};\n\nmodule.exports = {\n  findNeighboursOfCell,\n  findAllNeighbours,\n  calculateAliveNeighbours,\n  nextGeneration\n};\n","const zipper = function(yCoordinates) {\n    return function(result, element) {\n      for (let index = 0; index < yCoordinates.length; index++) {\n        result.push([element, yCoordinates[index]]);\n      }\n      return result;\n    };\n  };\n  \n  const validateNeighbours = function(bounds, neighbour) {\n    let startPoint = bounds.topLeft;\n    let endPopint = bounds.bottomRight;\n    let isValid = neighbour[0] >= startPoint[0] && neighbour[0] <= endPopint[0];\n    isValid =\n      isValid && neighbour[1] >= startPoint[1] && neighbour[1] <= endPopint[1];\n    return isValid;\n  };\n  \n  const contains = function(currentGeneration, neighbour) {\n    let isContained = currentGeneration.some(function(cell) {\n      return cell[0] === neighbour[0] && cell[1] === neighbour[1];\n    });\n    return isContained;\n  };\n  \n  module.exports = { zipper, validateNeighbours, contains };\n  ","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport GameOfLife from \"./gameOfLife\";\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.GameOfLife = GameOfLife;\n    this.boundaryLimits = {\n      topLeft: [0, 0],\n      bottomRight: [this.props.size - 1, this.props.size - 1]\n    };\n    this.state = { aliveCells: [] };\n    this.startGame = this.startGame.bind(this);\n    this.stopGame = this.stopGame.bind(this);\n    this.nextGeneration = this.GameOfLife.nextGeneration.bind(this);\n    this.getNextGenerationCells = this.getNextGenerationCells.bind(this);\n  }\n\n  addAliveCells(id) {\n    this.state.aliveCells.push(id.split(\"_\").map(number => +number));\n    let element = document.getElementById(id);\n    element.style.background = \"rgb(3, 5, 117)\";\n  }\n\n  displayNextGenerationCells(nextGeneration) {\n    nextGeneration.forEach(cell => {\n      let id = cell.join(\"_\");\n      document.getElementById(id).style.background = \"rgb(3, 5, 117)\";\n    });\n  }\n\n  removeCurrentGenerationCells() {\n    this.state.aliveCells.forEach(cell => {\n      let id = cell.join(\"_\");\n      document.getElementById(id).style.background = \"rgb(231, 236, 247)\";\n    });\n  }\n\n  getNextGenerationCells() {\n    let nextGeneration = this.nextGeneration(\n      this.state.aliveCells,\n      this.boundaryLimits\n    );\n    this.removeCurrentGenerationCells();\n    this.displayNextGenerationCells(nextGeneration);\n    this.setState({aliveCells : nextGeneration}\n    );\n\n  }\n\n  startGame() {\n    this.timerId = setInterval(() => {\n      this.getNextGenerationCells();\n    }, 500);\n  }\n\n  stopGame() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    return (\n      <main id=\"mainContainer\" className=\"main-container\">\n        <GameHeader />\n        <CreateTable size={this.props} key=\"gameTable\" game={this} />\n        <CreateGameButtons name={this.props} game={this} />\n      </main>\n    );\n  }\n}\n\nconst GameHeader = function(){\n  return (\n    <header>\n      Game Of Life\n    </header>\n  );\n}\n\nconst GenerateColumns = function(props) {\n  let columns = [];\n  for (let index = 0; index < props.size.size; index++) {\n    columns.push(\n      <td\n        id={props.id + \"_\" + index}\n        key={props.id + \"_\" + index}\n        onClick={props.game.addAliveCells.bind(\n          props.game,\n          props.id + \"_\" + index\n        )}\n      />\n    );\n  }\n  return columns;\n};\n\nconst GenerateRows = function(props) {\n  let rows = [];\n  for (let index = 0; index < props.size.size; index++) {\n    rows.push(\n      <tr id={index} key={index}>\n        <GenerateColumns\n          size={props.size}\n          id={index}\n          key={index}\n          game={props.game}\n        />\n      </tr>\n    );\n  }\n  return rows;\n};\n\nconst CreateTableBody = function(props) {\n  return (\n    <tbody>\n      <GenerateRows size={props.size} key=\"tableRows\" game={props.game} />\n    </tbody>\n  );\n};\n\nconst CreateTable = function(props) {\n  return (\n    <table>\n      <CreateTableBody size={props.size} key=\"tableBody\" game={props.game} />\n    </table>\n  );\n};\n\nconst CreateButton = function(props) {\n  return (\n    <button className=\"game-btn\" onClick={props.action}>\n      {props.name}\n    </button>\n  );\n};\n\nconst CreateGameButtons = function(props) {\n  return (\n    <div className=\"btn-container\">\n      <CreateButton name=\"START\" action={props.game.startGame} />\n      <CreateButton name=\"STOP\" action={props.game.stopGame} />\n    </div>\n  );\n};\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game size={15} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}